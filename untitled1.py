# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KcOUxKUQVXKxUOVoP3wdFeOYHwtVfZHZ
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""/content/drive/MyDrive/datsets/mcs_ds_edited_iter_shuffled.csv"""

import pandas as pd
Data_ALE = pd.read_csv(r'/content/drive/MyDrive/datsets/mcs_ds_edited_iter_shuffled.csv')

Data_ALE.head()

Data_ALE.tail()

Data_ALE.isna().sum()

Data_ALE.columns

Data_ALE.describe()

Data_ALE.anchor_ratio.value_counts()

Data_ALE.trans_range.value_counts()

Data_ALE.node_density.value_counts()

Data_ALE.iterations.value_counts()

Data_ALE.corr()

"""Splitting of training testing andmodeling model"""

y = Data_ALE.anchor_ratio
X = Data_ALE[['anchor_ratio', 'node_density', 'iterations', 'ale','sd_ale']]

X.head()

from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
import seaborn as sns

X_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2)

LR = LogisticRegression(random_state=1)

KN = KNeighborsClassifier(n_neighbors=2)

DC = DecisionTreeClassifier()

RF = RandomForestClassifier()

models = [LR,KN,DC,RF]

def trainer(model,X_train,y_train,X_valid,y_valid):
    model.fit(X_train,y_train)
    prediction = model.predict(X_valid)
    #print evaluation metric
    print('\nFor {}, Accuracy score is {} \n'.format(model.__class__.__name__,accuracy_score(prediction,y_valid)))

for model in models:
    trainer(model,X_train,y_train,X_valid,y_valid)

"""as it can br seen decision tree and random forest standout to be best algoritms for out data set with highest acurracy of 95%

"""

